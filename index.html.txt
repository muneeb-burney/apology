<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Hi Mahnooraaaa 💖</title>

  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

    :root{
      --bg1: #ffd6e7;
      --bg2: #ffeef8;
      --text: #4a2c2a;
      --accent: #9b3b6a;
    }

    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0;
      font-family:"Poppins",system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial;
      display:flex;
      align-items:center;
      justify-content:center;
      background: linear-gradient(135deg,var(--bg1),var(--bg2));
      color:var(--text);
      height:100vh;
      overflow:hidden;
    }

    /* container for slides */
    .slides{
      position:relative;
      width:min(900px,94%);
      max-width:900px;
      min-height:260px;
      padding:2rem;
      text-align:center;
    }

    /* slide base: stacked absolutely and cross-faded */
    .slide{
      position:absolute;
      inset:0;
      display:flex;
      flex-direction:column;
      justify-content:center;
      align-items:center;
      padding:2rem;
      opacity:0;
      transform:translateY(12px) scale(.995);
      visibility:hidden;
      transition:opacity .55s ease, transform .55s ease, visibility .01s linear .55s;
      pointer-events:none;
      text-wrap:balance;
    }
    .slide.active{
      opacity:1;
      transform:none;
      visibility:visible;
      pointer-events:auto;
      transition-delay:0s;
    }

    h1{font-size:2.2rem;margin-bottom:.75rem; color:var(--accent)}
    p{font-size:1.05rem;line-height:1.6;max-width:50ch}
    .tap{margin-top:1.6rem;font-size:.95rem;opacity:.85;animation:pulse 1.4s infinite}
    @keyframes pulse{0%{opacity:.45}50%{opacity:1}100%{opacity:.45}}

    /* controls */
    .controls{
      position:fixed;
      left:1rem;
      bottom:1rem;
      display:flex;
      gap:.5rem;
      align-items:center;
    }
    button.control{
      background:rgba(255,255,255,.9);
      border:1px solid rgba(0,0,0,.06);
      padding:.5rem .7rem;
      border-radius:999px;
      font-weight:600;
      cursor:pointer;
      box-shadow:0 6px 18px rgba(0,0,0,.06);
      backdrop-filter: blur(4px);
    }
    button.control:active{transform:translateY(1px)}
    .page-indicator{
      position:fixed;
      right:1rem;
      bottom:1rem;
      background:rgba(255,255,255,.85);
      padding:.5rem .7rem;
      border-radius:999px;
      font-size:.95rem;
      box-shadow:0 6px 18px rgba(0,0,0,.06);
    }

    /* accessibility: reduce motion */
    @media (prefers-reduced-motion: reduce){
      .slide{transition:none; transform:none}
      .tap{animation:none}
    }

    /* small screens */
    @media (max-width:480px){
      h1{font-size:1.6rem}
      p{font-size:1rem; padding:0 0.25rem}
      .controls{left:.6rem;bottom:.6rem}
      .page-indicator{right:.6rem;bottom:.6rem}
    }
  </style>
</head>
<body>
  <!-- audio starts paused to avoid browser autoplay restrictions.
       It will play on the first user interaction (tap/click/keyboard). -->
  <audio id="bgmusic" loop preload="auto">
    <source src="https://cdn.pixabay.com/audio/2023/02/28/audio_4d0d3b9e7f.mp3" type="audio/mpeg">
    <!-- fallback text for unsupported browsers -->
    Your browser does not support the audio element.
  </audio>

  <div class="slides" role="region" aria-roledescription="slideshow" aria-label="A short apology message">
    <div class="slide active" id="slide1" aria-hidden="false" aria-live="polite">
      <h1>Hi Mahnooraaaa 💖</h1>
      <p>It’s me… standing here quietly, just wanting you to read this with a calm heart.</p>
      <div class="tap">💫 Tap anywhere to continue 💫</div>
    </div>

    <div class="slide" id="slide2" aria-hidden="true" aria-live="polite">
      <p>
        I know I made things heavy between us.  
        I know I hurt your peace when all I ever wanted was to protect it.  
        The truth is, I feel this ache in me — the kind that whispers “you shouldn’t have.”  
        I wish I could turn time back, sit beside you, and say everything softer…  
        because losing your smile, even for a second, feels like losing daylight itself.
      </p>
      <div class="tap">💫 Tap anywhere again 💫</div>
    </div>

    <div class="slide" id="slide3" aria-hidden="true" aria-live="polite">
      <p>
        I’m not writing this to erase what happened — just to tell you I feel it, every bit of it.  
        I’m sorry, Mahnoora. I really am.  
        I miss your warmth, your little ways of making everything lighter.  
        Maybe this is just a page, but it carries my heart in it.  
        <br><br>— Hassan 💌
      </p>
      <div class="tap">💫 One last tap 💫</div>
    </div>
  </div>

  <div class="controls" aria-hidden="false">
    <button id="prevBtn" class="control" title="Previous (←)">◀ Prev</button>
    <button id="playBtn" class="control" title="Play or pause music">Play ♫</button>
    <button id="nextBtn" class="control" title="Next (→)">Next ▶</button>
  </div>

  <div class="page-indicator" id="pageIndicator" aria-hidden="false">1 / 3</div>

  <script>
    (function(){
      const slides = Array.from(document.querySelectorAll('.slide'));
      const audio = document.getElementById('bgmusic');
      const playBtn = document.getElementById('playBtn');
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      const pageIndicator = document.getElementById('pageIndicator');

      let index = 0;
      let userInteracted = false;

      function updateSlides(newIndex){
        slides.forEach((s,i)=>{
          const active = i === newIndex;
          s.classList.toggle('active', active);
          s.setAttribute('aria-hidden', active ? 'false' : 'true');
        });
        index = newIndex;
        pageIndicator.textContent = `${index+1} / ${slides.length}`;
      }

      function advance(by = 1){
        updateSlides((index + by + slides.length) % slides.length);
      }

      // Start audio on first gesture (avoids autoplay blocking on mobile/desktop browsers)
      function startAudioIfNeeded(){
        if (userInteracted) return;
        userInteracted = true;
        // try to play; catch and ignore any promise rejection
        audio.play().then(()=> {
          playBtn.textContent = 'Pause ⏸';
        }).catch(()=> {
          // some browsers still block — keep button text as "Play"
        });
      }

      // click/tap anywhere advances slides and triggers audio
      document.body.addEventListener('click', (e)=>{
        // when clicking control buttons, let their handlers run
        if (e.target.closest('.control')) return;
        startAudioIfNeeded();
        advance(1);
      }, {passive:true});

      // keyboard navigation
      window.addEventListener('keydown', (e)=>{
        if (e.key === 'ArrowRight' || e.key === ' '){
          e.preventDefault();
          startAudioIfNeeded();
          advance(1);
        } else if (e.key === 'ArrowLeft'){
          e.preventDefault();
          startAudioIfNeeded();
          advance(-1);
        } else if (e.key.toLowerCase() === 'm'){ // m = mute toggle
          toggleAudio();
        }
      });

      prevBtn.addEventListener('click', (e)=>{ e.stopPropagation(); startAudioIfNeeded(); advance(-1); });
      nextBtn.addEventListener('click', (e)=>{ e.stopPropagation(); startAudioIfNeeded(); advance(1); });

      function toggleAudio(){
        if (audio.paused){
          audio.play().then(()=> playBtn.textContent = 'Pause ⏸').catch(()=>{/*ignored*/});
        } else {
          audio.pause();
          playBtn.textContent = 'Play ♫';
        }
      }

      playBtn.addEventListener('click', (e)=>{
        e.stopPropagation();
        // if first time, count as user interaction
        startAudioIfNeeded();
        toggleAudio();
      });

      // update UI if audio is manually paused/played by browser controls
      audio.addEventListener('play', ()=> playBtn.textContent = 'Pause ⏸');
      audio.addEventListener('pause', ()=> playBtn.textContent = 'Play ♫');

      // small improvement: swipe support for touch devices
      let touchStartX = null;
      document.addEventListener('touchstart', (e)=>{
        touchStartX = e.changedTouches[0]?.clientX || null;
      }, {passive:true});
      document.addEventListener('touchend', (e)=>{
        if (touchStartX == null) return;
        const dx = (e.changedTouches[0]?.clientX || 0) - touchStartX;
        if (Math.abs(dx) > 40){
          startAudioIfNeeded();
          advance(dx < 0 ? 1 : -1);
        }
        touchStartX = null;
      }, {passive:true});

      // initial page indicator
      pageIndicator.textContent = `${index+1} / ${slides.length}`;

      // If you want the music to autostart regardless of restrictions, set audio.muted = true before calling play().
      // We intentionally keep it paused until a user gesture for best compatibility and accessibility.
    })();
  </script>
</body>
</html>